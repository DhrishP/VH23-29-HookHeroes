generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id         String              @id @default(uuid())
  userId     String              @unique
  username   String
  coins      Int                 @default(0)
  PrefTime   Int                 @default(5)
  questions  attemptedQuestion[]
  difficulty String @default("easy")
  createdAt  DateTime            @default(now())
}

model Teacher {
  id               String      @id @default(uuid())
  userId           String      @unique
  username         String
  createdQuestions Questions[] @relation("teacherQuestions")
  createdCourses   Courses[]   @relation("teacherCourses")
  createdAt        DateTime    @default(now())
}

model Courses {
  id          String    @id @default(uuid())
  imageUrl    String
  name        String
  price       Int
  description String
  TeacherId   String    @unique
  creator     Teacher   @relation("teacherCourses", fields: [TeacherId], references: [id])
  createdAt   DateTime  @default(now())
  Purchase    Purchase?
}

model Questions {
  id                String              @id @default(uuid())
  statement         String
  answer            String
  type              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  options           String[]            @default([])
  coins             Int?
  language          String
  difficulty        String?
  attemptedStudents attemptedQuestion[]
  TeacherId         String?             @unique
  author            Teacher?            @relation("teacherQuestions", fields: [TeacherId], references: [id])
  // statsId    String?
  // Quiz       Quiz?    @relation(fields: [quizId], references: [id])
  // quizId     String?
}

model attemptedQuestion {
  question   Questions @relation(fields: [questionId], references: [id])
  questionId String // relation scalar field (used in the `@relation` attribute above)
  student    Student   @relation(fields: [studentId], references: [id])
  studentId  String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime  @default(now())
  correct    Boolean   @default(false)

  @@id([questionId, studentId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String   @unique
  courseId  String   @unique
  course    Courses  @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
